// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

enum UserRole {
  USER
  ADMIN
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") 
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  Comment       Comemnt[]
}

model Song {
  id               Int        @id
  imageString      String
  title            String
  duration         String
  artist           String
  singer           String
  release          Int
  videoSource      String
  album            String
  category         String
  youtubeString    String
  rating           Float      @default(0)
  ratingCount      Int        @default(0)
  numberOfLikes    Int        @default(0)
  numberOfDislikes Int        @default(0)
  Comment          Comemnt[]
  SongLists        SongList[]
  userId           String?

  createdAt  DateTime     @default(now())
  SongAction SongAction[]
}

model SongList {
  id     String @id @default(uuid())
  userId String

  Song   Song? @relation(fields: [songId], references: [id])
  songId Int?
}

model SongAction {
  id     String @id @default(uuid())
  userId String

  Song   Song?  @relation(fields: [songId], references: [id])
  songId Int?
  type   String

  @@unique([songId, userId])
}

model Comemnt {
  id        String   @id @default(uuid())
  text      String
  createdAt DateTime @default(now())

  User   User?   @relation(fields: [userId], references: [id])
  userId String?

  Song   Song? @relation(fields: [songId], references: [id])
  songId Int?
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}
